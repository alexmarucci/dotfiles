# Function
snippet fun "function"
	function ${1:function_name}(${2}) {
		${0:${VISUAL}}
	}

snippet exfun "function"
	export function ${1:function_name}(${2}) {
		${0:${VISUAL}}
	}

snippet afun "function"
	async function ${1:function_name}(${2}) {
		${0:${VISUAL}}
	}

snippet exafun "function"
	export async function ${1:function_name}(${2}) {
		${0:${VISUAL}}
	}

snippet clo "() =>"
	(${1}) => ${0:${VISUAL}}

# Flow control
# if
snippet if "if (condition) { ... }"
	if (${1:true}) {
		${0:${VISUAL}}
	}
# if ... else
snippet ife "if (condition) { ... } else { ... }"
	if (${1:true}) {
		${0:${VISUAL}}
	} else {
		${2}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}
snippet case "case 'xyz': ... break"
	case '${1:case}':
		${0:${VISUAL}}
		break;
snippet try "try { ... } catch(e) { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:e}) {
		${2:/* handle error */}
	}
# For
snippet for "for (...) {...}"
	for (let ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
		${0:${VISUAL}}
	}
# For of loop
snippet forof
	for (const ${1:prop} of ${2:object}) {
		${0:$2[$1]}
	}

snippet log "console.log"
	console.log(${0});

snippet const
	const ${1} = ${0};

snippet excon
	export const ${1} = ${0};

snippet imp "import { member } from 'xyz'"
	import { ${2} } from '${1}';

# Jest test snippets
snippet it "it('msg', () => { ... });"
	it('${1}', () => {
		${0:${VISUAL}}
	});

snippet des "describe('msg', () => { ... });"
	describe('${1}', () => {
		${0:${VISUAL}}
	});
