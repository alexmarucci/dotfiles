#!/bin/sh

killProcessOnPort() {
  if [[ $1 -eq 0 ]]; then
        echo " [x] Usage: killProcessOnPort :port";
  else
    kill -9 $(lsof -t -i :$1) 2> /dev/null || echo " - No process is running on port "$1
  fi;
}

function doesFileExists() {
  local file=$1;
  local root_dir=$(git rev-parse --show-toplevel 2> /dev/null || pwd);
  local file_in_git=$(git ls-tree -r HEAD~1 --name-only | grep $file);
  
  if [[ $file_in_git != "" || -f "$root_dir/$file" || -f "$file" ]]; then
    echo true;
  else 
    echo false;
  fi
}

# alias y='yarn'
# # Yarn shortener (with args only)
function y() {
  local bin=${1:=''};
  local pnpm_lock=$(doesFileExists 'pnpm-lock.yaml');
  local yarn_lock=$(doesFileExists 'yarn.lock');
  local package_lock=$(doesFileExists 'package-lock.json');

  if [[ "$pnpm_lock" = true ]]; then
    bin=pnpm
  elif [[ "$yarn_lock" = true ]]; then
    bin=yarn
  elif [[ "$package_lock" = true ]]; then
    bin=npm
  else
    echo 'No known lockfile found, unable to guess package manager.'
    echo -n '- Which package manager? '
    read bin
  fi

  local hasScript=$(jq -e ".scripts | has(\"$1\")" package.json);

  if [ -z "$1" ]; then
    $bin install
  elif ($hasScript); then
    $bin run $@;
  else
    $bin $@;
  fi
}

function addOtp() {
  local QR_CODE=$1; 
  local OTP_NAME=$2; 

  if [ $# -eq 2 ]; then
    zbarimg -q --raw $QR_CODE | pass otp insert $OTP_NAME
  else
    echo "Parameters missing. Usage: addOtp ~/path/to/qr_code.png otp_secret_name"
  fi
}

function find_pr() {
  sha="$1";

  if [[ -z "${sha}" ]]; then
    commit=$(g log --oneline | fzf);

    sha=$(echo ${commit} | cut -d " " -f1);
  fi

  echo "Searching: ${commit:=$sha}"
  echo "-"

  template='{{range .}}{{"PR #"}}{{.number}} {{hyperlink .url .title}}{{"\n"}}{{end}}';
  gh pr list --search "${sha}" --state merged --json number,url,title --template "${template}"
}

function pgadmin() {
  local email='PGADMIN_DEFAULT_EMAIL=alessio.marucci@doxy.me'
  local pass='PGADMIN_DEFAULT_PASSWORD=pass'
  local no_server_mode='PGADMIN_CONFIG_SERVER_MODE=False'
  local nopass='PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False'
  local cwd=$HOME/.config/zsh

  docker run --name pgadmin -p 82:80 -e $email -e $pass -e $no_server_mode -e $nopass \
    -v $cwd/pgadmin_servers.json:/pgadmin4/servers.json \
    -v $cwd/pgpass:/pgpass \
    -d dpage/pgadmin4
}

function aws-refresh() {
  node ~/projects/hacks/aws-refresh-token/index.js
}

function usedoxy() {
  PROMPT="%B%F{80}>%f%b "
  clear
}

function zr () { 
  zellij run --name "$*" --in-place -- zsh -ic "$*";
  # remove from history
  history -d $((HISTCMD-1))
}

function zrf () { 
  zellij run --name "$*" --floating -- zsh -ic "$*";
  history -d $((HISTCMD-1))
}

function ghost () {
  zellij plugin --in-place --configuration "shell=zsh,shell_flag=-ic,cwd=$(pwd)" -- "file:$HOME/.config/zellij/plugins/ghost.wasm"
  history -d $((HISTCMD-1))
}

function work () {
  local current_folder_name="${PWD##*/}" 
  local name="${1:-$current_folder_name}"

  local session_exists=$(zellij list-sessions | grep "$name")

  if [[ "$session_exists" == *"$name"* ]]; then
    zellij attach "$name"
  else
    zellij --session "$name"
  fi
}

# Use lf to switch directories and bind it to ctrl-o
function lfcd () {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}

# Open drex as file explorer
alias dr='nvim -c "Drex"'
function nav() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

